import DefaultNotFound from "@/components/default-not-found";
import { AuthProvider } from "@/context/auth-provider";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { RouterProvider, createRouter } from "@tanstack/react-router";
import { StrictMode } from "react";
import ReactDOM from "react-dom/client";
import { routeTree } from "./routeTree.gen";
import "./main.css";

// * Initialize React Query client for managing server state
const queryClient = new QueryClient();

/**
 * The router instance:
 * - loads the route tree generated by the `routeTree.gen.ts` file
 * - sets a default not found component for missing routes
 * - sets the queryClient as context for loading data
 */
const router = createRouter({
	routeTree,
	defaultNotFoundComponent: DefaultNotFound,
	context: { queryClient },
});

// * TypeScript type registration for router instance
declare module "@tanstack/react-router" {
	// Register the router instance for type safety
	interface Register {
		router: typeof router;
	}
}

// * Mount React application with Router and Query providers
// biome-ignore lint/style/noNonNullAssertion: default
const rootElement = document.getElementById("root")!;
if (!rootElement.innerHTML) {
	// * Render the app
	const root = ReactDOM.createRoot(rootElement);
	root.render(
		<StrictMode>
			<QueryClientProvider client={queryClient}>
				<AuthProvider>
					<RouterProvider router={router} />
				</AuthProvider>
			</QueryClientProvider>
		</StrictMode>,
	);
}
